#!/usr/bin/env python3

import os
import sys
import re
import threading
import logging
import argparse
import tempfile

from apkenum.report import Report, ReportSection, TextReportFormatter
from apkenum.extraction import URLsExtractor, IPsExtractor, S3BucketsExtractor, S3URLsExtrctor, APKSource, PermissionsExtractor

logger = logging.getLogger(__name__)

class ReportRunner:
    def __init__(self, apk_source, sections_extractors):
        self.apk_source = apk_source
        self.sections_extractors = sections_extractors

    def build_report(self):
        report = Report()
        self._mine()
        for (section, extractor) in self.sections_extractors:
            section.add_all_values(extractor.results())
            report.add_section(section)
        return report
    
    def _mine(self):
        logger.info("Analyzing APK")
        self.apk_source.analyze()
        logger.info("Running extractors");
        for (_, extractor) in self.sections_extractors:
            logger.info("Running extractor %s", extractor)
            try:
                extractor.process(self.apk_source)
            except Exception as exc:
                logger.error("Error processing apk")
                logger.error(exc)

####################################################################################################

def main(args):
    # Parse the command line arguments
    argsparser = argparse.ArgumentParser(description="Find interesting things in Android APKs")
    argsparser.add_argument('-a', '--apk', help="The APK file to decompile")
    parsedargs = argsparser.parse_args(args)

    apk_path = None
    if parsedargs.apk is not None:
        apk_path = parsedargs.apk
    else:
        argsparser.print_usage()
        sys.exit(1)

    apk_source = APKSource(apk_path)
    sections_extractors = [
            (ReportSection("URLs"), URLsExtractor()),
            (ReportSection("IPs"), IPsExtractor()),
            (ReportSection("S3 Buckets"), S3BucketsExtractor()),
            (ReportSection("S3 URLs"), S3URLsExtrctor()),
            (ReportSection("Permisssions"), PermissionsExtractor())
            ]

    report_runner = ReportRunner(apk_source, sections_extractors)
    report = report_runner.build_report()
    formatter = TextReportFormatter()
    formatter.write_report(report, sys.stdout)

####################################################################################################

if __name__ == '__main__':
    main(sys.argv[1:])
